SELECT taxitwin.id, p1.latitude AS start_lat, p1.longitude AS start_long, p1.textual AS start_text, p2.latitude AS end_lat, p2.longitude AS end_long, p2.textual AS end_text, taxitwin.passengers AS passengers_total, COALESCE(partics.passengers, 0) AS passengers, device.name, device.google_id FROM taxitwin INNER JOIN point AS p1 ON taxitwin.start_point_id = p1.id INNER JOIN point AS p2 ON taxitwin.end_point_id = p2.id INNER JOIN device ON taxitwin.device_id = device.id LEFT OUTER JOIN (SELECT share.id, COUNT(share_id) AS passengers, share.owner_taxitwin_id FROM share INNER JOIN participants ON share.id = participants.share_id GROUP BY share.id) AS partics ON taxitwin.id = partics.owner_taxitwin_id WHERE taxitwin.id IN (SELECT taxitwin.id FROM taxitwin INNER JOIN point AS p1 ON taxitwin.start_point_id = p1.id INNER JOIN point AS p2 ON taxitwin.end_point_id = p2.id WHERE ST_DWithin(p1.geom, $1, $3::real) AND ST_DWithin(p2.geom, $2, $3::real) EXCEPT (SELECT taxitwin.id FROM taxitwin INNER JOIN device ON taxitwin.device_id = device.id INNER JOIN participants ON device.id = participants.device_id UNION SELECT taxitwin.id FROM taxitwin INNER JOIN (SELECT share.id, COUNT(participants.share_id) AS partics, share.owner_taxitwin_id FROM share INNER JOIN participants ON share.id = participants.share_id GROUP BY share.id) AS share ON share.owner_taxitwin_id = taxitwin.id WHERE share.partics = taxitwin.passengers));
